<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace PropertyMeld\MeldAPI;

class Building 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * buildingList
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\BuildingListRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\BuildingListSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\BuildingListResponse
     */
	public function buildingList(
        \PropertyMeld\MeldAPI\Models\Operations\BuildingListRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\BuildingListSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\BuildingListResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/building/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\PropertyMeld\MeldAPI\Models\Operations\BuildingListRequest::class, $request, null));
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        if (!array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\BuildingListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedBuildingSerializerListList = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\PaginatedBuildingSerializerListList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * buildingRetrieve
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\BuildingRetrieveRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\BuildingRetrieveSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\BuildingRetrieveResponse
     */
	public function buildingRetrieve(
        \PropertyMeld\MeldAPI\Models\Operations\BuildingRetrieveRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\BuildingRetrieveSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\BuildingRetrieveResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/building/{id}/', \PropertyMeld\MeldAPI\Models\Operations\BuildingRetrieveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        if (!array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\BuildingRetrieveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->buildingSerializerDetail = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\BuildingSerializerDetail', 'json');
            }
        }

        return $response;
    }
}