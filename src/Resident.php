<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace PropertyMeld\MeldAPI;

class Resident 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * residentCreateForm
     * 
     * @param \PropertyMeld\MeldAPI\Models\Shared\ResidentInput1 $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateFormSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateFormResponse
     */
	public function residentCreateForm(
        \PropertyMeld\MeldAPI\Models\Shared\ResidentInput1 $request,
        \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateFormSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateFormResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/resident/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resident = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Resident', 'json');
            }
        }

        return $response;
    }
	
    /**
     * residentCreateJson
     * 
     * @param \PropertyMeld\MeldAPI\Models\Shared\ResidentInput $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateJsonSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateJsonResponse
     */
	public function residentCreateJson(
        \PropertyMeld\MeldAPI\Models\Shared\ResidentInput $request,
        \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateJsonSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateJsonResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/resident/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resident = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Resident', 'json');
            }
        }

        return $response;
    }
	
    /**
     * residentCreateMultipart
     * 
     * @param \PropertyMeld\MeldAPI\Models\Shared\ResidentInput1 $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateMultipartSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateMultipartResponse
     */
	public function residentCreateMultipart(
        \PropertyMeld\MeldAPI\Models\Shared\ResidentInput1 $request,
        \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateMultipartSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateMultipartResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/resident/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\ResidentCreateMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resident = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Resident', 'json');
            }
        }

        return $response;
    }
	
    /**
     * residentDestroy
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentDestroyRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentDestroySecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\ResidentDestroyResponse
     */
	public function residentDestroy(
        \PropertyMeld\MeldAPI\Models\Operations\ResidentDestroyRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\ResidentDestroySecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\ResidentDestroyResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/resident/{id}/', \PropertyMeld\MeldAPI\Models\Operations\ResidentDestroyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\ResidentDestroyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * residentList
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentListRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentListSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\ResidentListResponse
     */
	public function residentList(
        \PropertyMeld\MeldAPI\Models\Operations\ResidentListRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\ResidentListSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\ResidentListResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/resident/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\PropertyMeld\MeldAPI\Models\Operations\ResidentListRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\ResidentListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedResidentList = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\PaginatedResidentList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * residentPartialUpdateForm
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateFormRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateFormSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateFormResponse
     */
	public function residentPartialUpdateForm(
        \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateFormRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateFormSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateFormResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/resident/{id}/', \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "patchedResidentInput1", "form");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resident = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Resident', 'json');
            }
        }

        return $response;
    }
	
    /**
     * residentPartialUpdateJson
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateJsonRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateJsonSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateJsonResponse
     */
	public function residentPartialUpdateJson(
        \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateJsonRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateJsonSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateJsonResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/resident/{id}/', \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "patchedResidentInput", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resident = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Resident', 'json');
            }
        }

        return $response;
    }
	
    /**
     * residentPartialUpdateMultipart
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateMultipartRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateMultipartSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateMultipartResponse
     */
	public function residentPartialUpdateMultipart(
        \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateMultipartRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateMultipartSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateMultipartResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/resident/{id}/', \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "patchedResidentInput1", "multipart");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\ResidentPartialUpdateMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resident = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Resident', 'json');
            }
        }

        return $response;
    }
	
    /**
     * residentRetrieve
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentRetrieveRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentRetrieveSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\ResidentRetrieveResponse
     */
	public function residentRetrieve(
        \PropertyMeld\MeldAPI\Models\Operations\ResidentRetrieveRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\ResidentRetrieveSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\ResidentRetrieveResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/resident/{id}/', \PropertyMeld\MeldAPI\Models\Operations\ResidentRetrieveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\ResidentRetrieveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resident = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Resident', 'json');
            }
        }

        return $response;
    }
	
    /**
     * residentUpdateForm
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateFormRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateFormSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateFormResponse
     */
	public function residentUpdateForm(
        \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateFormRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateFormSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateFormResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/resident/{id}/', \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateFormRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "residentInput1", "form");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateFormResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resident = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Resident', 'json');
            }
        }

        return $response;
    }
	
    /**
     * residentUpdateJson
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateJsonRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateJsonSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateJsonResponse
     */
	public function residentUpdateJson(
        \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateJsonRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateJsonSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateJsonResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/resident/{id}/', \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateJsonRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "residentInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateJsonResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resident = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Resident', 'json');
            }
        }

        return $response;
    }
	
    /**
     * residentUpdateMultipart
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateMultipartRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateMultipartSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateMultipartResponse
     */
	public function residentUpdateMultipart(
        \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateMultipartRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateMultipartSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateMultipartResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/resident/{id}/', \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateMultipartRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "residentInput1", "multipart");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\ResidentUpdateMultipartResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->resident = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Resident', 'json');
            }
        }

        return $response;
    }
}