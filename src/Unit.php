<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace PropertyMeld\MeldAPI;

class Unit 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * unitCreate
     * 
     * @param \PropertyMeld\MeldAPI\Models\Shared\UnitInput $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\UnitCreateSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\UnitCreateResponse
     */
	public function unitCreate(
        \PropertyMeld\MeldAPI\Models\Shared\UnitInput $request,
        \PropertyMeld\MeldAPI\Models\Operations\UnitCreateSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\UnitCreateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/unit/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\UnitCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unit = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Unit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * unitDestroy
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\UnitDestroyRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\UnitDestroySecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\UnitDestroyResponse
     */
	public function unitDestroy(
        \PropertyMeld\MeldAPI\Models\Operations\UnitDestroyRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\UnitDestroySecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\UnitDestroyResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/unit/{id}/', \PropertyMeld\MeldAPI\Models\Operations\UnitDestroyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\UnitDestroyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * unitList
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\UnitListRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\UnitListSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\UnitListResponse
     */
	public function unitList(
        \PropertyMeld\MeldAPI\Models\Operations\UnitListRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\UnitListSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\UnitListResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/unit/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\PropertyMeld\MeldAPI\Models\Operations\UnitListRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\UnitListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedUnitList = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\PaginatedUnitList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * unitPartialUpdate
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\UnitPartialUpdateRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\UnitPartialUpdateSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\UnitPartialUpdateResponse
     */
	public function unitPartialUpdate(
        \PropertyMeld\MeldAPI\Models\Operations\UnitPartialUpdateRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\UnitPartialUpdateSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\UnitPartialUpdateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/unit/{id}/', \PropertyMeld\MeldAPI\Models\Operations\UnitPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "patchedUnitInput", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\UnitPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unit = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Unit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * unitRetrieve
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\UnitRetrieveRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\UnitRetrieveSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\UnitRetrieveResponse
     */
	public function unitRetrieve(
        \PropertyMeld\MeldAPI\Models\Operations\UnitRetrieveRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\UnitRetrieveSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\UnitRetrieveResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/unit/{id}/', \PropertyMeld\MeldAPI\Models\Operations\UnitRetrieveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\UnitRetrieveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unit = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Unit', 'json');
            }
        }

        return $response;
    }
	
    /**
     * unitUpdate
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\UnitUpdateRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\UnitUpdateSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\UnitUpdateResponse
     */
	public function unitUpdate(
        \PropertyMeld\MeldAPI\Models\Operations\UnitUpdateRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\UnitUpdateSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\UnitUpdateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/unit/{id}/', \PropertyMeld\MeldAPI\Models\Operations\UnitUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "unitInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\UnitUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->unit = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Unit', 'json');
            }
        }

        return $response;
    }
}