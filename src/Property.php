<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace PropertyMeld\MeldAPI;

class Property 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * propertyCreate
     * 
     * @param \PropertyMeld\MeldAPI\Models\Shared\PropertyInput $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\PropertyCreateSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\PropertyCreateResponse
     */
	public function propertyCreate(
        \PropertyMeld\MeldAPI\Models\Shared\PropertyInput $request,
        \PropertyMeld\MeldAPI\Models\Operations\PropertyCreateSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\PropertyCreateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/property/');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\PropertyCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->property = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Property', 'json');
            }
        }

        return $response;
    }
	
    /**
     * propertyDestroy
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\PropertyDestroyRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\PropertyDestroySecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\PropertyDestroyResponse
     */
	public function propertyDestroy(
        \PropertyMeld\MeldAPI\Models\Operations\PropertyDestroyRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\PropertyDestroySecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\PropertyDestroyResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/property/{id}/', \PropertyMeld\MeldAPI\Models\Operations\PropertyDestroyRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\PropertyDestroyResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * propertyList
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\PropertyListRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\PropertyListSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\PropertyListResponse
     */
	public function propertyList(
        \PropertyMeld\MeldAPI\Models\Operations\PropertyListRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\PropertyListSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\PropertyListResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/property/');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getQueryParams(\PropertyMeld\MeldAPI\Models\Operations\PropertyListRequest::class, $request, null));
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\PropertyListResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->paginatedPropertyList = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\PaginatedPropertyList', 'json');
            }
        }

        return $response;
    }
	
    /**
     * propertyPartialUpdate
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\PropertyPartialUpdateRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\PropertyPartialUpdateSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\PropertyPartialUpdateResponse
     */
	public function propertyPartialUpdate(
        \PropertyMeld\MeldAPI\Models\Operations\PropertyPartialUpdateRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\PropertyPartialUpdateSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\PropertyPartialUpdateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/property/{id}/', \PropertyMeld\MeldAPI\Models\Operations\PropertyPartialUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "patchedPropertyInput", "json");
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PATCH', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\PropertyPartialUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->property = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Property', 'json');
            }
        }

        return $response;
    }
	
    /**
     * propertyRetrieve
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\PropertyRetrieveRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\PropertyRetrieveSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\PropertyRetrieveResponse
     */
	public function propertyRetrieve(
        \PropertyMeld\MeldAPI\Models\Operations\PropertyRetrieveRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\PropertyRetrieveSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\PropertyRetrieveResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/property/{id}/', \PropertyMeld\MeldAPI\Models\Operations\PropertyRetrieveRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\PropertyRetrieveResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->property = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Property', 'json');
            }
        }

        return $response;
    }
	
    /**
     * propertyUpdate
     * 
     * @param \PropertyMeld\MeldAPI\Models\Operations\PropertyUpdateRequest $request
     * @param \PropertyMeld\MeldAPI\Models\Operations\PropertyUpdateSecurity $security
     * @return \PropertyMeld\MeldAPI\Models\Operations\PropertyUpdateResponse
     */
	public function propertyUpdate(
        \PropertyMeld\MeldAPI\Models\Operations\PropertyUpdateRequest $request,
        \PropertyMeld\MeldAPI\Models\Operations\PropertyUpdateSecurity $security,
    ): \PropertyMeld\MeldAPI\Models\Operations\PropertyUpdateResponse
    {
        $baseUrl = $this->sdkConfiguration->getServerUrl();
        $url = Utils\Utils::generateUrl($baseUrl, '/api/v0.0.1/property/{id}/', \PropertyMeld\MeldAPI\Models\Operations\PropertyUpdateRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "propertyInput", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \PropertyMeld\MeldAPI\Models\Operations\PropertyUpdateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->property = $serializer->deserialize((string)$httpResponse->getBody(), 'PropertyMeld\MeldAPI\Models\Shared\Property', 'json');
            }
        }

        return $response;
    }
}